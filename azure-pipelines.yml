trigger:
- main

pool:
  name: Default   # Uses your self-hosted agent

variables:
  buildConfiguration: 'Release'

stages:
# ----------------------------
# ‚úÖ STAGE 1: BUILD & PUBLISH
# ----------------------------
- stage: Build
  displayName: 'Build and Test'
  jobs:
    - job: BuildJob
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '9.x'
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - checkout: self

        - script: dotnet restore
          displayName: 'Restore NuGet Packages'

        - script: dotnet build --configuration $(buildConfiguration)
          displayName: 'Build the Application'

        - script: dotnet test --no-restore --verbosity normal
          displayName: 'Run Unit Tests'

        - script: dotnet publish ./vkapi.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
          displayName: 'Publish the Application'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'

# ----------------------------
# ‚úÖ STAGE 2: DEPLOY TO DEV
# ----------------------------
- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: succeeded()
  jobs:
    - deployment: DevDeploy
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: none

              - task: DownloadBuildArtifacts@0
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'drop'
                  downloadPath: '$(Pipeline.Workspace)'

              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'DevOpsAzureService'  # Replace this
                  appType: 'webApp'
                  appName: 'vkapp2'                        # Replace this
                  package: '$(Pipeline.Workspace)/drop'

# -----------------------------------
# üåê STAGE 3: DEPLOY TO QA
# -----------------------------------
- stage: DeployQA
  displayName: 'Deploy to QA'
  dependsOn: DeployDev
  condition: succeeded()
  jobs:
    - deployment: QADeploy
      environment: 'qa'
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: none

              - task: DownloadBuildArtifacts@0
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'drop'
                  downloadPath: '$(Pipeline.Workspace)'

              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'DevOpsAzureService'  # Replace this
                  appType: 'webApp'
                  appName: 'vkapp-qa'
                  package: '$(Pipeline.Workspace)/drop'

# -----------------------------------
# üî• STAGE 4: DEPLOY TO PROD
# -----------------------------------
- stage: DeployProd
  displayName: 'Deploy to Prod Staging'
  dependsOn: DeployQA
  condition: succeeded()
  jobs:
    - deployment: ProdDeploy
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: none

              - task: DownloadBuildArtifacts@0
                inputs:
                  buildType: 'current'
                  downloadType: 'single'
                  artifactName: 'drop'
                  downloadPath: '$(Pipeline.Workspace)'

              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'DevOpsAzureService'  # Replace this
                  appType: 'webApp'
                  appName: 'vkapp-prod'
                  slotName: 'staging'    
                  package: '$(Pipeline.Workspace)/drop'
              - script: |
                echo "üß™ Starting smoke test with curl and retry logic..."
                url="https://vkapp-prod-staging-b9gsgzbeexdfdnep.canadacentral-01.azurewebsites.net/health"
                max_retries=3
                delay=5
                count=1
                success=false

                while [ $count -le $max_retries ]; do
                  echo "Attempt $count of $max_retries..."
                  curl -fk --silent --show-error "$url"
                  if [ $? -eq 0 ]; then
                    echo "‚úÖ Smoke test passed!"
                    success=true
                    break
                  else
                    echo "‚ùå Attempt $count failed"
                  fi
                  count=$((count + 1))
                  if [ $count -le $max_retries ]; then
                    echo "Retrying in $delay seconds..."
                    sleep $delay
                  fi
                done

                if [ "$success" = false ]; then
                  echo "‚ùå Smoke test failed after $max_retries attempts"
                  exit 1
                fi
              displayName: 'Smoke Test with Retry (curl)'


- stage: SwapToProd
  displayName: 'Swap Slot to Prod'
  dependsOn: DeployProd
  condition: succeeded()
  jobs:
    - deployment: SwapJob
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - checkout: none
              - download: none
              - task: AzureAppServiceManage@0
                inputs:
                  azureSubscription: 'DevOpsAzureService'
                  Action: 'Swap Slots'
                  WebAppName: 'vkapp-prod'
                  ResourceGroupName: 'vklearn'
                  SourceSlot: 'staging'
                  TargetSlot: 'production'         


